Special options:
‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒

--checkout=string

Helper function for the busy developer who has a large number of
git branches to handle.  Takes the specified string, searches the
available branches in the current directory, and will checkout
the one if there is a single match.  Presents the matching branches
if there is more than one.  Will checkout branch "main" if "master"
was specified if there is no branch named "master", and vice-versa.
Branches need not have been checked out locally yet.

--edit[=editor]

Take the search result as positions in the code to go edit.  If no
specific editor is specified, will assume what is specified in the
EDITOR environment variable.  If no editor specification can be
found, will assume "vim" as the editor.

Can be used in conjuction with --find to edit files of which the
name matches the pattern.

--vimgrep

Take the search result as positiuons in the code to go edit from
within "vim" using the :vimgrep option.

--sourcery

Mainly intended for Raku Programming Language core developers.
If specified, indicates that the pattern should be interpreted
as code specifying a simple call to a subroutine, or a simple
call to a method, optionally with arguments.  The search result
will then contain the source locations of subroutine / method
that is expected to be able to handle that call.  Compatible
with the --edit, --vimgrep and the implicit per-line option.

Example:
# edit the location(s) of the "say" sub handling a single string
$ rak --sourcery 'say "foo"' --edit

--ecosystem[=name,name2]

Intended to be used by Raku ecosystem maintainers.  Indicates the
name of one or more Raku ecosystems (separated by commmas) of
which to inspect the META6.json information of all its modules.
Currently supported names are:

 - p6c  - the original git ecosystem (deprecated)
 - cpan - the ecosystem piggybacking on PAUSE / CPAN (deprecated)
 - fez  - the currently recommended ecosystem for new modules / updates
 - rea  - the Raku Ecosystem Archive

Defaults to "rea" if specified as a flag.  Implies --json-per-elem.

Examples:
# show all unique module names by an author from the REA
$ rak '{ .author eq "Scooby Doo" }' --ecosystem

# same, but now from the p6c and cpan ecosystems
$ rak '{ .author eq "Scooby Doo" }' --ecosystem=p6c,cpan

Assumes "zef" is installed and its meta information is available.
