Input selection:

--find

The absolute path of a file will be used for matching, and is passed to
the pattern if the pattern is a Callable.

--json-per-file

Attempt to parse the whole file as JSON.  If successful, pass this to the
pattern Callable.  Only files with the .json extension will be tried, unless
overridden by any explicit extension specification.

--json-per-line

Attempt to parse each line in the file as JSON.  If successful, pass this to
the pattern Callable.  Only files with the .jsonl extension will be tried,
unless overridden by any explicit extension specification.

--blame-per-file

Attempt to obtain "git blame" information of the file as a Git::Blame::File
object.  If successful, pass Git::Blame::File to the pattern Callable.
Any file with a known extension will be tried, unless overridden by any
explicit extension specification.

These methods can be called on the object passed to the pattern Callable:
- commits  Map of commits, key is SHA1, value if Git::Blame::Commit object
- authors  list of unique authors

These methods can be called on the Git::Blame::Commit object:
- author             the name of the author
- author-mail        the email address of the author
- author-time        a DateTime object for the authoring
- commit             the associated Git::Blame::Commit object
- committed          whether it has been committed already
- committer          the name of the committer
- committer-mail     the email address of the committer
- committer-time     a DateTime object for the committing
- previous-sha1      the full SHA1 of the previous commit
- previous-sha       the shortened SHA1 of the previous commit
- previous-filename  the filename in the previous commit
- sha1               full SHA1 of the commit to which this line belongs
- sha                shortened SHA1 of the commit to which this line belongs
- summary            the first line of the commit message of this line

Example: committers in a repository
$ rak '*.authors.Slip' --git-blame-per-file --unique

--blame-per-line

Attempt to obtain "git blame" information of the file as a Git::Blame::File
object.  If successful, pass each line as a Git::Blame::Line to the pattern
Callable.  Any file with a known extension will be tried, unless overridden
by any explicit extension specification.

Apart from the methods that can be called on the Git::Blame::Commit object,
these additional methods can be called on the object passed to the pattern
Callable:
- commit                the associated Git::Blame::Commit object
- filename              the current filename
- line                  the actual line currently
- line-number           the current line-number
- original-line-number  line number when this line was created

--csv-per-line

Attempt to interprete file as a CSV file, and pass each row as a List to
to the pattern Callable.  Only files with extensions from the C<#csv> group
will be tried, unless overridden by any explicit extension specification.

The following options only make sense when --csv-per-line has been specified:
- --eol=[\n|\r|\r\n]     different line ending to assume
- --sep=[,]              field separator, default: ,
- --quote=["]            quoting char, default: "
- --escape=[\\]          escape character, default \  (shell requires \\)
- --strict               flag, do not allow different number of fields
- --formula=[type]       none | die | diag | empty, default: none
- --allow-whitespace     flag, allow whitespace around separator
- --allow-loose-quotes   flag, allow unquoted fields
- --allow-loose-escapes  flag, allow any character to be escaped
- --keep-meta            flag, produce fields as CSV::Field instead of Str
