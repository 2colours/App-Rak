=begin pod

=head1 NAME

App::Rak - 21st century grep / find / ack / ag / rg on steroids

=head1 SYNOPSIS

=begin code :lang<bash>

$ rak foo      # look for "foo" in current directory recursively

$ rak foo bar  # look for "foo" in directory "bar" recursively

$ rak '/ << foo >> /'    # look for "foo" as word in current directory

$ rak foo --files-only  # look for "foo", only produce filenames

$ rak foo --before=2 --after=2  # also produce 2 lines before and after

$ rak '{.contains("foo") && .contains("bar")}'  # lines with foo AND bar

=end code

=head1 DESCRIPTION

App::Rak provides a CLI called C<rak> that allows you to look for a pattern
in (a selection of files) from one or more directories recursively.  It has
been modelled after utilities such as C<grep>, C<ack>, C<ag> and C<rg>, with
a little bit of C<find> mixed in, and C<-n> and C<-p> parameters of many
programming languages.

Note: this is still very much in alpha development phase.  Comments,
suggestions and bug reports are more than welcome!

=head1 POSITIONAL ARGUMENTS

=head2 pattern

The pattern to search for.  This can either be a string, or a
L<Raku regular expression|https://docs.raku.org/language/regexes>
(indicated by a string starting and ending with C</>), a
C<Callable> (indicated by a string starting with C<{> and ending with C<}>),
or a a result of L<C<Whatever> currying|https://docs.raku.org/type/Whatever>
(indicated by a string starting with C<*.>).

Can also be specified with the C<--pattern> option, in which case B<all>
the positional arguments are considered to be a path specification.

If the pattern is a C<Callable>, then the dynamic variable C<$*IO> will
contain the C<IO::Path> object of the file being processed.  Note that
pattern C<Callable>s will be called in a thread B<unsafe> manner.

=head2 path(s)

Optional.  Either indicates the path of the directory (and its
sub-directories), or the file that will be searched.  By default, all
directories that do not start with a period, will be recursed into (but
this can be changed with the C<--dir> option).

By default, all files will be searched in the directories.  This can be
changed with the C<--file> option

=head1 ON CALLABLES AS PATTERN

The Raku Programming Language has a number of unique features that can
be used with patterns that are so-called C<Callable>s.  One of them is
the use of so-called L<phasers|https://docs.raku.org/language/phasers>
(pieces of code that will be executed automatically when a certain
condition has been met.

C<App::Rak> currently supports the
L<loop phasers|https://docs.raku.org/language/phasers#FIRST>:

=item FIRST - code to run when searching starts
=item NEXT - code to run when searching a file is done
=item LAST - code to run when searching is done

These phasers will be called in a thread-safe manner.

=begin code :lang<bash>

$ rak '{ FIRST state $seen = 0; NEXT $seen++; LAST say "$seen files"; .contains("pattern")}'

=end code

Any other phasers that do not require special attention by C<App::Rak>
are also supported in any code specified.

=head1 CREATING YOUR OWN OPTIONS

App::Rak provides B<many> options.  If you are happy with a set of options
for a certain workflow, You can use the C<--save> option to save that set
of options and than later access them with the given name:

=begin code :lang<bash>

$ rak --ignorecase --ignoremark --save=im
Saved option '--im' as: --ignorecase --ignoremark

# same as --ignorecase --ignoremark
$ rak foo --im

=end code

You can use the C<--list-custom-options> to see what options you have saved
before.

=head1 SUPPORTED OPTIONS

All options are optional.  Any unexpected options, will cause an exception
to be thrown with the unexpected options listed.

=head2 --after-context=N

Indicate the number of lines that should be shown B<after> any line that
matches.  Defaults to B<0>.  Will be overridden by a C<--context> argument.

=head2 --backup[=extension]

Indicate whether backups should be made of files that are being modified.
If specified without extension, the extension C<.bak> will be used.

=head2 --before-context=N

Indicate the number of lines that should be shown B<before> any line that
matches.  Defaults to B<0>.  Will be overridden by a C<--context> argument.

=head2 --blame-per-line

Flag.  Only makes sense if the pattern is a C<Callable>.  If specified with a
C<True> value, indicates that each line from the selected files will be
provided as L<C<Git::Blame::Line>|https://raku.land/zef:lizmat/Git::Blame::File#accessors-on-gitblameline>
objects if C<git blame> can be performed on the a selected file.  If that
is not possible, then the selected file will be ignored.

If <git blame> information can be obtained, then the associated
C<Git::Blame::Line> object will be presented to the pattern C<Callable>.
If the Callable returns a true value, then the short representation of
the C<git blame> information will be shown.  If the returned value is a
string, then that string will be shown.

=begin code :lang<bash>

$ rak '{ .author eq "Scooby Doo" }' --blame-per-line

=end code

=head2 --break[=string]

Indicate whether there should be a visible division between matches of
different files.  Can also be specified as a string to be used as the
divider.  Defaults to C<True> (using an empty line as a divider) if
C<--human> is (implicitly) set to C<True>, else defaults to C<False>.

=head2 --context=N

Indicate the number of lines that should be shown B<around> any line that
matches.  Defaults to B<0>.  Overrides any a C<--after-context> or
C<--before-context> arguments.

=head2 --count-only

Flag.  Indicate whether just the number of lines with matches should be
calculated.  When specified with a C<True> value, will show a "N matches
in M files" by default, and if the C<:files-with-matches> option is also
specified with a C<True> value, will also list the file names with their
respective counts.

=head2 --dryrun

Flag.  Indicate to B<not> actually make any changes to any content
modification if specified with a C<True> value.  Only makes sense together
with the C<--modify-files> option.

=head2 --edit[=editor]

Indicate whether the patterns found should be fed into an editor for
inspection and/or changes.  Defaults to C<False>.  Optionally takes the
name of the editor to be used.

=head2 --extensions=spec

Indicate the extensions of the filenames that should be inspected.
By default, no limitation on filename extensions will be done.

Extensions can be specified as a comma-separated list, or one of
the predefined groups, indicated by C<#name>.

=begin code :lang<bash>

# inspect files with extensions used by Raku
$ rak foo --extensions=#raku

# inspect files with Markdown content
$ rak foo --extensions=md,markdown

# inspect files without extension
$ rak foo --extensions=

=end code

Predefined groups are C<#raku>, C<#perl>, C<#c>, C<#c++>, C<#yaml>, <#ruby>
C<#python>, C<#markdown> and C<#text>.

=head2 --file-separator-null

Flag.  Indicate to separate filenames by null bytes rather than newlines
if the C<--files-with-matches> option is specified with a C<True> value.

=head2 --files-from=filename

Indicate the path of the file to read filenames from instead of the
expansion of paths from any positional arguments.  "-" can be specified
to read filenames from STDIN.

=head2 --files-with-matches

Flag.  If specified with a true value, will only produce the filenames of
the files in which the pattern was found.  Defaults to C<False>.

=head2 --find

Flag.  If specified with a true value, will B<not> look at the contents of
the selected paths, but instead consider the selected paths as lines in a
virtual file.

=head2 --group-matches

Flag.  Indicate whether matches of a file should be grouped together by
mentioning the filename only once (instead of on every line).  Defaults
to C<True> if C<--human> is (implicitly) set to C<True>, else defaults
to C<False>.

=head2 --highlight

Flag.  Indicate whether the pattern should be highlighted in the line in
which it was found.  Defaults to C<True> if C<--human> is (implicitly) set
to C<True>, else defaults to C<False>.

=head2 --help [area-of-interest]

Show argument documentation, possibly extended by giving the area of
interest, which are:

=item pattern
=item string
=item code
=item input
=item haystack
=item result
=item listing
=item resource
=item edit
=item option
=item general
=item philosophy
=item examples

=head2 --highlight--after[=string]

Indicate the string that should be used at the end of the pattern found in
a line.  Only makes sense if C<--highlight> is (implicitly) set to C<True>.
Defaults to the empty string if C<--only-matching> is specified with a
C<True> value, or to the terminal code to end B<bold> otherwise.

=head2 --highlight--before[=string]

Indicate the string that should be used at the end of the pattern found in
a line.  Only makes sense if C<--highlight> is (implicitly) set to C<True>.
Defaults to a space if C<--only-matching> is specified with a C<True> value,
or to the terminal code to start B<bold> otherwise.

=head2 --human

Flag.  Indicate that search results should be presented in a human readable
manner.  This means: filenames shown on a separate line, line numbers
shown, and highlighting performed.  Defaults to C<True> if C<STDOUT> is
a TTY (aka, someone is actually watching the search results), otherwise
defaults to C<False>.

=head2 --json-per-file

Flag.  Only makes sense if the pattern is a C<Callable>.  If specified with
a C<True> value, indicates that each selected file will be interpreted
as JSON, and if valid, will then be given to the pattern for introspection.
If the Callable returns a true value, the filename will be shown.  If
the returned value is a string, that string will also be mentioned.
For example:

=begin code :lang<bash>

$ rak '{ $_ with .<auth> }' --json-per-file

=end code

=head2 --json-per-line

Flag.  Only makes sense if the pattern is a C<Callable>.  If specified with
a C<True> value, indicates that each line from the selected files will be
interpreted as JSON, and if valid, will then be given to the pattern for
introspection.  If the Callable returns a true value, the filename and
line number will be shown.  If the returned value is a string, that
string will also be mentioned.  For example:

=begin code :lang<bash>

$ rak '{ $_ with .<auth> }' --json-per-line

=end code

=head2 --known-extensions

Flag.  Indicate that only files with known extensions (occuring in any of
the C<#groups>) should be searched.  Defaults to C<True> if a human is
watching.

=head2 --list-custom-options

=begin code :lang<bash>

$ rak --list-custom-options
fs: --'follow-symlinks'
im: --ignorecase --ignoremark

=end code

Flag.  If specified with a true value and as the only option, will list all
additional options previously saved with C<--save>.

=head2 --list-expanded-options

=begin code :lang<bash>

$ rak --im --list-expanded-options
--ignorecase --ignoremark

=end code

Flag.  If specified with a true value, will show all actual options being
activated after having been recursively expanded, and then exit.
Intended as a debugging aid if you have many custom options defined.

=head2 --list-known-extensions

=begin code :lang<bash>

$ rak --list-known-extensions
       #c: c h hdl
     #c++: cpp cxx hpp hxx
  #config: ini
#markdown: md markdown
    #perl: (none) pl pm t
  #python: py
    #raku: (none) raku rakumod rakutest rakudoc nqp t pm6 pl6 pod6 t6
    #ruby: rb
    #text: (none) txt
    #yaml: yaml yml

=end code

Flag.  If specified with a true value, will show all known extension
groups and the extensions they represent.  Intended as an informational
aid.

=head2 --modify-files

Flag.  Only makes sense if the specified pattern is a C<Callable>.
Indicates whether the output of the pattern should be applied to the file
in which it was found.  Defaults to C<False>.

The C<Callable> will be called for each line, giving the line (B<including>
its line ending).  It is then up to the C<Callable> to return:

=head3 False

Remove this line from the file.  NOTE: this means the exact C<False> value.

=head3 True

Keep this line unchanged the file.  NOTE: this means the exact C<True> value.

=head3 Empty

Keep this line unchanged the file.  NOTE: this means the exact C<Empty> value.
This is typically returned as the result of a failed condition.  For example,
only change the string "foo" into "bar" if the line starts with "#":

=begin code :lang<bash>

$ rak '{ .subst("foo","bar") if .starts-with("#") }' --modify-files

=end code

=head3 any other value

Inserts this value in the file instead of the given line.  The value can
either be a string, or a list of strings.

=head2 --module=foo

Indicate the Raku module that should be loaded.  Only makes sense if the
pattern is executable code.

=head2 --only-matching

Flag.  Indicate whether only the matched pattern should be produced, rather
than the line in which the pattern was found.  Defaults to C<False>.

=head2 --output-file=filename

Indicate the path of the file in which the result of the search should
be placed.  Defaults to C<STDOUT>.

=head2 --pager

Indicate the name (and arguments) of a pager program to be used to page
through the generated output.  Defaults to the C<RAK_PAGER> environment
variable.  If that isn't specified either, then no pager program will be
run.

=begin code :lang<bash>

$ RAK_PAGER='more -r' rak foo

$ rak foo --pager='less -r'

=end code

=head2 --paragraph-context

Flag.  Indicate all lines that are part of the same paragraph B<around>
any line that matches.  Defaults to C<False>.

=head2 --passthru-context

Flag.  Indicate whether B<all> lines from source should be shown, even if
they do B<not> match the pattern.  Highlighting will still be performed, if
so (implicitely) specified.

=begin code :lang<bash>

# Watch a log file, and highlight a certain IP address.
$ tail -f ~/access.log | rak --passthru 123.45.67.89

=end code

=head2 --paths-from=filename

Indicate the path of the file to read path specifications from instead of
from any positional arguments.  "-" can be specified to read path
specifications from STDIN.

=head2 --pattern=foo

Alternative way to specify the pattern to search for.  If (implicitly)
specified, will assume the first positional parameter specified is
actually a path specification, rather than a pattern.  This allows
the pattern to be searched for to be saved with C<--save>.

=head2 --quietly

Flag.  Only makes sense if the pattern is a C<Callable>.  If specified
with a true value, will catch all B<warnings> that are emitted when executing
the pattern's C<Callable>.  Defaults to False.

=head2 --recurse-unmatched-dir

Flag.  Indicate whether directories that didn't match the C<--dir>
specification, should be recursed into anyway.  Will not produce files
from such directories, but may recurse further if directories are
encountered. Defaults to C<False>.

=head2 --recurse-symlinked-dir

Flag.  Indicate whether directories that are actually symbolic links,
should be recursed into.  Defaults to C<False>.

=head2 --repository=dir

Indicate the directory that should be searched for Raku module loading.
Only makes sense if the pattern is executable code.

Note that you can create a familiar shortcut for the most common arguments of
the C<--repository> option:

=begin code :lang<bash>

$ rak --repository=. --save=I.
Saved option '--I.' as: --repository='.'

$ rak --repository=lib --save=Ilib
Saved option '--Ilib' as: --repository=lib

=end code

=head2 --save=shortcut-name

Save all options with the given name in the configuration file
(C<~/.rak-config.json>), and exit with a message that these options have
been saved with the given name.

This feature can used to both create shortcuts for specific (long) options,
or just as a convenient way to combine often used options.

=begin code :lang<bash>

$ rak --ignorecase --ignoremark --save=im
Saved option '--im' as: --ignorecase --ignoremark

# same as --ignorecase --ignoremark
$ rak foo --im

$ rak --follow-symlinks --save=fs
Saved option '--fs' as: --follow-symlinks

$ rak --break='[---]' --save=B
Saved option '--B' as: --break='[---]'

$ rak --pattern=! --save=P
Saved option '--P' as: --pattern='!'

$ rak --save=foo
Removed configuration for 'foo'

=end code

Any options can be accessed as if it is a standard option.  Please note
that no validity checking on the options is being performed at the moment
of saving, as validity may depend on other options having been specified.

One option can be marked as requiring a value to be specified (with "!")
or have a default value (with "[default-value]").

To remove a saved set of options, use C<--save> as the only option.

=head2 --show-blame

Flag.  Indicate whether to show C<git blame> information for matching lines
if possible, instead of just the line.  Defaults to C<False>.

=head2 --show-filename

Flag.  Indicate whether filenames should be shown.  Defaults to C<True> if
C<--human> is (implicitly) set to C<True>, else defaults to C<False>.

=head2 --show-line-number

Flag.  Indicate whether line numbers should be shown.  Defaults to C<True> if
C<--human> is (implicitly) set to C<True> and <-h> is B<not> set to C<True>,
else defaults to C<False>.

=head1 --silently[=out,err]

Flag and option.  Only applicable if the pattern is a C<Callable>.  Indicates
whether any output from the C<Callable> pattern should be caught.  Defaults
to C<False>.  If specified as a flag, will catch both STDOUT as well as
STDERR output from the pattern's execution.  When specified as an option,
will accept:

=item out - only capture STDOUT
=item err - only capture STDERR
=item out,err - capture both STDIN as well as STDERR
=item err,out - capture both STDIN as well as STDERR

=head2 --smartcase

Flag.  An intelligent version of C<--ignorecase>.  If the pattern does
B<not> contain any uppercase characters, it will act as if C<--ignorecase>
was specified.  Otherwise it is ignored.

=head2 --summary-if-larger-than=N

Indicate the maximum size a line may have before it will be summarized.
Defaults to C<160> if C<STDOUT> is a TTY (aka, someone is actually watching
the search results), otherwise defaults to C<Inf> effectively (indicating
no summarization will ever occur).

=item --type[=words|starts-with|ends-with|contains]

Only makes sense if the pattern is a string.  With C<words> specified,
will look for pattern as a word in a line, with C<starts-with> will
look for the pattern at the beginning of a line, with C<ends-with>
will look for the pattern at the end of a line, with C<contains> will
look for the pattern at any position in a line.

=head2 --trim

Flag.  Indicate whether lines that have the pattern, should have any
whitespace at the start and/or end of the line removed.  Defaults to
C<True> if no context for lines was specified, else defaults to C<False>.

=head2 --unique

Flag.  If specified with a true value, will only produce unique lines of
output.  Default is C<False>.

=head2 --version

Flag.  If the only argument, shows the name and version of the script, and
the system it is running on.

=head2 --vimgrep

Flag.  If specified with a true value, will output search results in the
format "filename:linenumber:column:line".  This allows integration with the
C<:grep> action in vim-like editors.

=head1 IN APPLICATION USAGE

You can also load the C<App::Rak> module as a module in your own application.
It will then export a C<rak> subroutine with the same arguments as the
C<rak> command line interface.

This is still a bit experimental.

Currently calling this subroutine will return C<Nil>.  That may change in
the future.

=begin code :lang<raku>

use App::Rak;

rak 'foo';  # look for "foo" in all files with known extensions from "."

=end code

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/App-Rak .
Comments and Pull Requests are welcome.

If you like this module, or what I’m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2022 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under
the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
